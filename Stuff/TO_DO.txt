
* Implement body getter
* Bounce clients properly (Meaning, return error page correctly if necessary)
* implement default error pages (Just some html)
* Implement CGI handler (Use fork() !!!!)
* How to upload files ? (Post method)


Configuration
* conf file checker ? (We exit() if we detect any issue with the conf file ? Prob better to avoid any segfaults etc if MF tries to fuck us over)
* try with different server_name + server_name not necessary ! (Handle if not given, should still work)
* conf location ?
* Client_max_body_size: change to int, remove "M" suffix
* Implement routes
	-> lists accepted Methods (get, post, delete) for this route
	-> defines a redirection (error pages ?)
	-> on/off directory listing
	-> directory/ file search path ?? (J'ai pas encore bien compris)
	-> if request is directory -> default file as response
	-> CGI file extension check

*******
The first server for a host:port will be the default for this host:port (that means
it will answer to all the requests that don’t belong to an other server)

chat gpt response:
Certainly! Let's break down the requirement in simpler terms.

Imagine you have a computer that acts as a web server, and it has a specific address (host) and port number. 
This computer can host multiple websites or applications. 
Each website or application can have its own configuration with specific rules for handling incoming requests.

Now, let's say the computer receives a request from a client (a web browser or another application) to access a particular website or resource. 
The server needs to determine how to handle that request and which website or application it belongs to.

According to the requirement, if the server receives a request that does not match any specific website or application configuration, 
it should forward that request to a default server. 
The default server is like a catch-all option—it handles any requests that don't match the specific rules defined for other websites or applications.

In other words, the default server acts as a fallback option. 
If the server cannot find a specific rule for the requested resource, 
it will automatically route the request to the default server, which will then handle it.

This ensures that even if there is no explicit configuration for a particular website or application, 
the default server will handle the request and provide a response to the client.

In practical terms, when setting up your web server, 
you would configure multiple virtual hosts or server blocks. 
Each virtual host or server block would have its own rules for handling requests. 
The first virtual host or server block defined for a specific host and port combination would serve as the default server, 
catching any requests that don't match the rules of the subsequent virtual hosts or server blocks.
********